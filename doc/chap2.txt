  
  [1X2 [33X[0;0YBactracking[133X[101X
  
  
  [1X2.1 [33X[0;0YKnapsack[133X[101X
  
  [1X2.1-1 KSCheckKnapsackInput[101X
  
  [29X[2XKSCheckKnapsackInput[102X( [3Xprofits[103X, [3Xweights[103X, [3Xcapacity[103X ) [32X function
  
  [33X[0;0YChecks for valid input data for the Knapsack problems (Problems 1.1-1.4).[133X
  
  [1X2.1-2 KSKnapsack1[101X
  
  [29X[2XKSKnapsack1[102X( [3Xprofits[103X, [3Xweights[103X, [3Xcapacity[103X ) [32X function
  
  [33X[0;0YImplementation of Algorithm 4.1.[133X
  
  [1X2.1-3 KSKnapsack2[101X
  
  [29X[2XKSKnapsack2[102X( [3Xprofits[103X, [3Xweights[103X, [3Xcapacity[103X ) [32X function
  
  [33X[0;0YImplementation of Algorithm 4.3.[133X
  
  
  [1X2.2 [33X[0;0YGenerating all cliques[133X[101X
  
  [1X2.2-1 KSAllCliques[101X
  
  [29X[2XKSAllCliques[102X( [3Xgraph[103X ) [32X function
  
  [33X[0;0YImplementation  of  Algorithm  4.4.  A graph [22XG[122X is defined by the list [3Xgraph[103X,
  which  must  be  a  list  of  subsets  of [22X{1,...,n}[122X, for some integer [22Xn[122X. The
  neighbors of vertex [22Xi[122X are the elements of [3Xgraph[i][103X.[133X
  
  
  [1X2.3 [33X[0;0YExact cover[133X[101X
  
  [1X2.3-1 KSExactCover[101X
  
  [29X[2XKSExactCover[102X( [3Xnumber[103X, [3Xcover[103X ) [32X function
  
  [33X[0;0YFinds an subcollection of [3Xcover[103X (which is a set of subsets of [22X{1,..,[3Xnumber[103X}[122X)
  that is an exact cover of [22X{1,..,[3Xnumber[103X}[122X, if it exists.[133X
  
  
  [1X2.4 [33X[0;0YBounding functions[133X[101X
  
  [1X2.4-1 KSSortForRationalKnapsack[101X
  
  [29X[2XKSSortForRationalKnapsack[102X( [3Xprofits[103X, [3Xweights[103X ) [32X function
  
  [33X[0;0YGiven two vectors [3Xprofits[103X, [3Xweights[103X of the same length, this function returns
  a  vector  of  the  two vectors, sorted in non-decreasing order of values of
  [22X[3Xprofits[i][103X/[3Xweights[i][103X[122X.[133X
  
  [1X2.4-2 KSRationalKnapsackSorted[101X
  
  [29X[2XKSRationalKnapsackSorted[102X( [3Xprofits[103X, [3Xweights[103X, [3Xcapacity[103X ) [32X function
  
  [33X[0;0YSolves  the  rational  Knapsack  problem  with parameters given. The vectors
  [3Xprofits[103X, [3Xweights[103X must already be sorted.[133X
  
  [1X2.4-3 KSKnapsack3[101X
  
  [29X[2XKSKnapsack3[102X( [3Xprofits[103X, [3Xweights[103X, [3Xcapacity[103X ) [32X function
  
  [33X[0;0YSolves  the  Knapsack  problem  with  parameters  given,  using the function
  KSRationalKnapsackSorted as bounding function.[133X
  
  [1X2.4-4 KSRandomKnapsackInstance[101X
  
  [29X[2XKSRandomKnapsackInstance[102X( [3Xsize[103X, [3Xmaximum_weight[103X ) [32X function
  
  [33X[0;0YReturns  a  random  instance  of  a  Knapsack problem, for [3Xsize[103X objects. The
  maximum  weight  is [3Xmaximum_weight[103X. For each [22Xi[122X, the profit [22XP[i][122X is [22X2*W[i]*Ïµ[122X,
  where [22XÏµ[122X is a random number between [22X0.9[122X and [22X1.1[122X.[133X
  
  
  [1X2.5 [33X[0;0YExercises[133X[101X
  
  [1X2.5-1 KSQueens[101X
  
  [29X[2XKSQueens[102X( [3Xsize[103X ) [32X function
  
  [33X[0;0YSolves the [22Xn[122X queens problem for a [22X[3Xsize[103XÃ—[3Xsize[103X[122X board.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XKSQueens(4);[127X[104X
    [4X[28X[ 2, 4, 1, 3 ][128X[104X
    [4X[28X[ 3, 1, 4, 2 ][128X[104X
  [4X[32X[104X
  
