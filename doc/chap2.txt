  
  [1X2 [33X[0;0YBactracking[133X[101X
  
  
  [1X2.1 [33X[0;0YKnapsack[133X[101X
  
  [1X2.1-1 KSCheckKnapsackInput[101X
  
  [29X[2XKSCheckKnapsackInput[102X( [3Xprofits[103X, [3Xweights[103X, [3Xcapacity[103X ) [32X function
  
  [33X[0;0YChecks for valid input data for the Knapsack problems (Problems 1.1-1.4).[133X
  
  [1X2.1-2 KSKnapsack1[101X
  
  [29X[2XKSKnapsack1[102X( [3Xprofits[103X, [3Xweights[103X, [3Xcapacity[103X ) [32X function
  
  [33X[0;0YImplementation of Algorithm 4.1.[133X
  
  [1X2.1-3 KSKnapsack2[101X
  
  [29X[2XKSKnapsack2[102X( [3Xprofits[103X, [3Xweights[103X, [3Xcapacity[103X ) [32X function
  
  [33X[0;0YImplementation of Algorithm 4.3.[133X
  
  
  [1X2.2 [33X[0;0YGenerating all cliques[133X[101X
  
  [1X2.2-1 KSAllCliques[101X
  
  [29X[2XKSAllCliques[102X( [3Xgraph[103X ) [32X function
  
  [33X[0;0YImplementation  of  Algorithm  4.4.  A graph [22XG[122X is defined by the list [3Xgraph[103X,
  which  must  be  a  list  of  subsets  of [22X{1,...,n}[122X, for some integer [22Xn[122X. The
  neighbors of vertex [22Xi[122X are the elements of [3Xgraph[i][103X.[133X
  
  
  [1X2.3 [33X[0;0YExact cover[133X[101X
  
  [1X2.3-1 KSExactCover[101X
  
  [29X[2XKSExactCover[102X( [3Xnumber[103X, [3Xcover[103X ) [32X function
  
  [33X[0;0YFinds an subcollection of [3Xcover[103X (which is a set of subsets of [22X{1,..,[3Xnumber[103X}[122X)
  that is an exact cover of [22X{1,..,[3Xnumber[103X}[122X, if it exists.[133X
  
  
  [1X2.4 [33X[0;0YBounding functions[133X[101X
  
  [1X2.4-1 KSSortForRationalKnapsack[101X
  
  [29X[2XKSSortForRationalKnapsack[102X( [3Xprofits[103X, [3Xweights[103X ) [32X function
  
  [33X[0;0YGiven two vectors [3Xprofits[103X, [3Xweights[103X of the same length, this function returns
  a  vector  of  the  two vectors, sorted in non-decreasing order of values of
  [22X[3Xprofits[i][103X/[3Xweights[i][103X[122X.[133X
  
  [1X2.4-2 KSRationalKnapsackSorted[101X
  
  [29X[2XKSRationalKnapsackSorted[102X( [3Xprofits[103X, [3Xweights[103X, [3Xcapacity[103X ) [32X function
  
  [33X[0;0YSolves  the  rational  Knapsack  problem  with parameters given. The vectors
  [3Xprofits[103X, [3Xweights[103X must already be sorted.[133X
  
  [1X2.4-3 KSKnapsack3[101X
  
  [29X[2XKSKnapsack3[102X( [3Xprofits[103X, [3Xweights[103X, [3Xcapacity[103X ) [32X function
  
  [33X[0;0YSolves  the  Knapsack  problem  with  parameters  given,  using the function
  KSRationalKnapsackSorted as bounding function.[133X
  
  [1X2.4-4 KSRandomKnapsackInstance[101X
  
  [29X[2XKSRandomKnapsackInstance[102X( [3Xsize[103X, [3Xmaximum_weight[103X ) [32X function
  
  [33X[0;0YReturns  a  random  instance  of  a  Knapsack problem, for [3Xsize[103X objects. The
  maximum  weight  is [3Xmaximum_weight[103X. For each [22Xi[122X, the profit [22XP[i][122X is [22X2*W[i]*Ïµ[122X,
  where [22XÏµ[122X is a random number between [22X0.9[122X and [22X1.1[122X.[133X
  
  [1X2.4-5 KSRandomTSPInstance[101X
  
  [29X[2XKSRandomTSPInstance[102X( [3Xn[103X, [3XWmax[103X ) [32X function
  
  [33X[0;0YReturns  a  random  instance of the TSP problem, which is a symmetric [3Xn[103X by [3Xn[103X
  matrix,  such that its [22Xij[122X entry is the cost to travel from city [22Xi[122X to city [22Xj[122X.
  The  entries  in  the  diagonal  are  made equal to [22Xâˆž[122X. Each cost is a random
  integer between 1 and [3XWmax[103X.[133X
  
  [1X2.4-6 KSTSP1[101X
  
  [29X[2XKSTSP1[102X( [3XG[103X ) [32X function
  
  [33X[0;0YSolves the TSP problem, for the instance [3XG[103X, traversing the whole tree space.[133X
  
  [1X2.4-7 KSMinCostBound[101X
  
  [29X[2XKSMinCostBound[102X( [3XV[103X, [3XG[103X ) [32X function
  
  [33X[0;0YA bounding function for the TSP problem.[133X
  
  [1X2.4-8 KSReduce[101X
  
  [29X[2XKSReduce[102X( [3XM[103X ) [32X function
  
  [33X[0;0YReduce  function  for  matrices, which will be useful to implement a secound
  bounding function for the TSP problem.[133X
  
  [1X2.4-9 KSReduceBound[101X
  
  [29X[2XKSReduceBound[102X( [3XV[103X, [3XM[103X ) [32X function
  
  [33X[0;0YA second bounding function for the TSP problem. [3XV[103X is a partial solution, and
  [3XM[103X is the problem instance. This implements Algorithm 4.12.[133X
  
  [1X2.4-10 KSTSP2[101X
  
  [29X[2XKSTSP2[102X( [3XG[103X, [3XF[103X ) [32X function
  
  [33X[0;0YSolves the TSP problem for instance [3XG[103X, using the bounding function [3XF[103X.[133X
  
  [1X2.4-11 KSMaxClique1[101X
  
  [29X[2XKSMaxClique1[102X( [3XG[103X ) [32X function
  
  [33X[0;0YAdapts the function that lists the complete subgraphs of [3XG[103X, to find the size
  of the largest clique of [3XG[103X. This implements Algorithm 4.14.[133X
  
  [1X2.4-12 KSMaxClique2[101X
  
  [29X[2XKSMaxClique2[102X( [3XG[103X, [3XF[103X ) [32X function
  
  [33X[0;0YFinds  the  size  of  the  maximum clique in the graph [3XG[103X, using the bounding
  function [3XF[103X. This implements Algorithm 4.19.[133X
  
  [1X2.4-13 KSSizeBound[101X
  
  [29X[2XKSSizeBound[102X( [3XXX[103X, [3XG[103X, [3XCl[103X ) [32X function
  
  [33X[0;0YA  bounding function for the MaxClique problem. [3XXX[103X is a complete subgraph of
  [3XG[103X, and [3XCl[103X is the set of candidates to extend [3XXX[103X.[133X
  
  [1X2.4-14 KSGenerateRandomGraph[101X
  
  [29X[2XKSGenerateRandomGraph[102X( [3Xn[103X ) [32X function
  
  [33X[0;0YReturns  a  list  of  edges of a random graph on [3Xn[103X vertices. This implements
  Algorithm 4.20.[133X
  
  [1X2.4-15 KSEdgeListToAdjacencyList[101X
  
  [29X[2XKSEdgeListToAdjacencyList[102X( [3XGed[103X, [3Xn[103X ) [32X function
  
  [33X[0;0YGiven  the  list  of  edges  [3XGed[103X  of  a  graph  with [3Xn[103X vertices, returns the
  adjacency list of such graph.[133X
  
  [1X2.4-16 KSGreedyColor[101X
  
  [29X[2XKSGreedyColor[102X( [3XG[103X ) [32X function
  
  [33X[0;0YColors  the  vertices  of a graph [3XG[103X using a greedy strategy. This implements
  Algorithm 4.16.[133X
  
  [1X2.4-17 KSSamplingBound[101X
  
  [29X[2XKSSamplingBound[102X( [3XXX[103X, [3XG[103X, [3XCl[103X ) [32X function
  
  [33X[0;0YA  bounding function for the MaxClique problem. [3XXX[103X is a complete subgraph of
  [3XG[103X,  and [3XCl[103X is the set of candidates to extend [3XXX[103X. This function uses a fixed
  greedy coloring of the graph [3XG[103X. Implements Algorithm 4.17.[133X
  
  [1X2.4-18 KSInducedSubgraph[101X
  
  [29X[2XKSInducedSubgraph[102X( [3XG[103X, [3XL[103X ) [32X function
  
  [33X[0;0YReturns  the  adjacency list of the subgraph of [3XG[103X induced by the vertices in
  [3XL[103X.[133X
  
  [1X2.4-19 KSGreedyBound[101X
  
  [29X[2XKSGreedyBound[102X( [3XXX[103X, [3XG[103X, [3XCl[103X ) [32X function
  
  [33X[0;0YA  bounding function for the MaxClique problem. [3XXX[103X is a complete subgraph of
  [3XG[103X, and [3XCl[103X is the set of candidates to extend [3XXX[103X. This uses a greedy coloring
  of the subgraph of [3XG[103X induced by [3XL[103X.[133X
  
  [1X2.4-20 KSGenerateRandomGraph2[101X
  
  [29X[2XKSGenerateRandomGraph2[102X( [3Xn[103X, [3Xdelta[103X ) [32X function
  
  [33X[0;0YReturns  the list of edges of a random graph on [3Xn[103X vertices with edge density
  [3Xdelta[103X.[133X
  
  
  [1X2.5 [33X[0;0YExercises[133X[101X
  
  [1X2.5-1 KSQueens[101X
  
  [29X[2XKSQueens[102X( [3Xsize[103X ) [32X function
  
  [33X[0;0YSolves the [22Xn[122X queens problem for a [22X[3Xsize[103XÃ—[3Xsize[103X[122X board.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XKSQueens(4);[127X[104X
    [4X[28X[ 2, 4, 1, 3 ][128X[104X
    [4X[28X[ 3, 1, 4, 2 ][128X[104X
  [4X[32X[104X
  
